import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter as tk
from tkinter import ttk

# Load the CSV data
def load_data(file_path):
    df = pd.read_csv(file_path, parse_dates=['timestamp'])
    df.set_index('timestamp', inplace=True)
    return df

# Function to plot selected sensor data
def plot_sensor(selected_sensor):
    # Clear the previous plot
    ax.clear()
    
    # Plot the selected sensor's data
    ax.plot(data.index, data[selected_sensor], label=f'{selected_sensor} Value', color='blue')
    
    # Highlight uptime/downtime (assuming 'Restarting' column exists)
    if 'Restarting' in data.columns:
        ax.scatter(data.index[data['Restarting'] == 1], 
                   data[selected_sensor][data['Restarting'] == 1], 
                   color='red', label='Restarting Event', zorder=5)
    
    # Set plot labels and formatting
    ax.set_title(f'Sensor: {selected_sensor}', fontsize=14)
    ax.set_xlabel('Timestamp', fontsize=12)
    ax.set_ylabel('Sensor Value', fontsize=12)
    ax.tick_params(axis='x', rotation=45)
    ax.legend()
    
    # Redraw the canvas
    canvas.draw()

# Callback function for dropdown selection
def on_sensor_select(event):
    selected_sensor = sensor_dropdown.get()
    plot_sensor(selected_sensor)

# File path to your CSV file
file_path = "C:/Uni year 1/EE106/S2 project/sensor_timeseries.csv"

# Load the data
data = load_data(file_path)

# Get the list of sensors (excluding 'Restarting' column)
sensors = [col for col in data.columns if col != 'Restarting']

# Create the main Tkinter window
root = tk.Tk()
root.title("Sensor Data Visualizer")
root.geometry("800x600")

# Dropdown menu for sensor selection
sensor_label = tk.Label(root, text="Select Sensor:", font=("Arial", 12))
sensor_label.pack(pady=10)

sensor_dropdown = ttk.Combobox(root, values=sensors, state="readonly", font=("Arial", 10))
sensor_dropdown.pack(pady=10)
sensor_dropdown.bind("<<ComboboxSelected>>", on_sensor_select)

# Matplotlib figure and axes
fig, ax = plt.subplots(figsize=(8, 4))
fig.subplots_adjust(bottom=0.2)  # Adjust bottom margin for better tick visibility

# Embed Matplotlib figure into Tkinter canvas
canvas = FigureCanvasTkAgg(fig, master=root)
canvas_widget = canvas.get_tk_widget()
canvas_widget.pack(fill=tk.BOTH, expand=True)

# Start with the first sensor selected by default
if sensors:
    sensor_dropdown.set(sensors[0])
    plot_sensor(sensors[0])

# Run the Tkinter main loop
root.mainloop()
