import pandas as pd 
# This handles our data extraction from the csv file, and manipulated the format for us making it plottable. The data is now defines as sets (collums)
import matplotlib.pyplot as plt
# This is the library we are using to create our plots for the data, specifically the time versus sensor value only.
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,
                                               NavigationToolbar2Tk)
# These are 'add-ons' which allow us to make out gui more interactive. 
# Canvas allows our GUI to feedback to this code and change what graph is being displayed, and nav adds a manipulation tool-bar on the graph to zoom etc.
from matplotlib.dates import DateFormatter
# This was added so we could manually over-ride auto-scalling when zooming into our graph so we have all information we need to depict a certain point on the graph.
import tkinter as tk
# This is the GUI library we are inporting and need to 'define' in order to access features from it. 
from tkinter import ttk
# Themed tkinter widgets, this is add-ons for the buttons and labels etc on our gui.
import seaborn as sbn
# This was imported right at the end and is used only for the PDF function as it displays a curved graph rather than matplotlibs bar chart.

def load_data(fileroute): # Defined itself for better scope management.
    # This is the function used to load data from CSV for manipulation. 
    df = pd.read_csv(fileroute, parse_dates=['timestamp'])
    # This reads the CSV and then defining the collum 'timestamp' as time-series data
    df.set_index('timestamp', inplace=True)
    # This then sets those time stamps as the index of our graph.
    return df
    #return means that this function df will now represent all 5 lines and is callable as that.

def plot_single_sensor(selected_sensor):
    # This is the function that will plot the data for a single sensor from our time series file
    ax.clear()
    # This makes sure that all data from the current plots are cleared to avoid overalpping data/ crashing.
    ax.plot(loadfile.index, loadfile[selected_sensor], label=f'{selected_sensor} Value', color='blue')
    # This plots the sensor data, pretty easy to follow, the label f' function just defines what it is potting and sticks it on the label axis.
    if 'machine_status' in loadfile.columns:
        # If in machine status column, plot the recovering status as red dots on the points
        recovering_events = loadfile[loadfile['machine_status'] == 'RECOVERING']
        # Defines recovering variables within machine_status as recovering_events
        ax.scatter(recovering_events.index, 
                   recovering_events[selected_sensor],
                   color='red', label='Recovering Event', zorder=2)
        # creates a scatter plot of those events, and added zorder makes those red dots overlap the original plot (brought to front in publisher)

    ax.set_title(f'Sensor: {selected_sensor}', fontsize=14)
    # Sets the plot title and labels using matplotlib
    ax.set_xlabel('Timestamp', fontsize=12)
    # ""
    ax.set_ylabel('Sensor Value', fontsize=12)
    # ""
    formatter = DateFormatter('%d/%m/%Y - %H:%M:%S')
    # Uses the matplotlib date formatter to force format the time index - day,month,year - hour,minute,second
    ax.xaxis.set_major_formatter(formatter)
    # sets x axis format as created vairable 'formatter'
    ax.tick_params(axis='x', rotation=45)
    # rotates the x axis by 45 degrees for readability and the ability to fit in more ticks per scale.
    ax.legend()
    # Add a legend to the plot (blue = sensor values, red = recovering etc)
    canvas.draw()
    #redraws the canvas to show the new selected plot each and everytime, so the formatting is updated everytime a new plot is drawn.

def plot_KDE(selected_sensor): 
    # The function that plots the probability density function of the sensors data
    ax.clear() 
    # clears the existent plot that was already on display on the gui to draw a new one
    sbn.kdeplot(loadfile[selected_sensor].dropna(), ax=ax, color='blue', shade=True)
    # Plots the sensor value of the selected sensor on the combo box and sets the value of the sensors as the x-axis and density as the y axis
    ax.set_title(f'PDF of Sensor: {selected_sensor}', fontsize=14) 
    # Sets the title of the drawn graph as the selector sensors name etc etc
    ax.set_xlabel('Sensor Value', fontsize=12) 
    # ""
    ax.set_ylabel('Density', fontsize=12) 
    # ""
    canvas.draw() 
    # Redraws the canvas in order to show the new plot

def on_sensor_select(event):
    # Function that handles the sensor selection and plot type changes within the gui feedbacking to the main code, uses combobox from ttk
    sensor_display = select_menu.get()
    # Takes the selected sensor that the user wants to see
    plot_type = plot_type_menu.get() 
    # Takes the selected plot type the user wants to see
    if plot_type == "Value Against Time": #
        plot_single_sensor(sensor_display)
        # Exactly what it says if timeseries is selected it plots time series
    elif plot_type == "KDE": 
        plot_KDE(sensor_display) 
        # And again if PDF is selected it will plot a PDF

fileroute = "C:/Uni year 1/EE106/S2 project/sensor_timeseries.csv"
# The file route to the CSV time-series that can be altered per device

loadfile = load_data(fileroute)
# Loads the file from the file route

all_sensors = [col for col in loadfile.columns if col != "machine_status"]
# From the CSV file extracts a list of all the sensor 

root = tk.Tk()
# Creates tne gui winding of tkinter as the gui
root.title("Sensor Data Illustration")
# Creates a name of the window
root.geometry("1920x1080")
# Sets the pixel size of the window, but can be moved and full screened as per the users interaction with the window.

selected_sensor_title = tk.Label(root, text="Select Sensor:", font=("Times New Roman", 12))
selected_sensor_title.pack(pady=10)
# This creates a label for the select data combo box for sensor selection

select_menu = ttk.Combobox(root, values=all_sensors, state="readonly", font=("Times New Roman", 10))
select_menu.pack(pady=10)
select_menu.bind("<<ComboboxSelected>>", on_sensor_select)
# This creates the drop down menu for the selected sensor to be selected using the combobox tool

plot_type_title = tk.Label(root, text="Select Plot Type:", font=("Times New Roman", 12)) #
plot_type_title.pack(pady=10) #
# Create a label underneath the selection box for the user to pick the type of graph they want to display

plot_type_menu = ttk.Combobox(root, values=["Value Against Time", "KDE"], state="readonly", font=("Times New Roman", 10)) 
plot_type_menu.pack(pady=10) 
plot_type_menu.bind("<<ComboboxSelected>>", on_sensor_select) 
plot_type_menu.set("Value Against Time") 
# Creates the drop down menu for the user to select what graph they want to select, but defaults to time series when a sensor is selected.

fig, ax = plt.subplots(figsize=(8, 4))
# This creates a matplotlib figure and axis of the slected data
fig.subplots_adjust(bottom=0.2) 
# This adjust the bottom margin of the plot so it is not on the border of the window, in the other elements pady is used for this

canvas = FigureCanvasTkAgg(fig, master=root)
canvas_graph_show = canvas.get_tk_widget()
canvas_graph_show.pack(fill=tk.BOTH, expand=True)
# This takes the creates matplotlib figure and transforms it into a canvas figure

toolbar = NavigationToolbar2Tk(canvas,root)
toolbar.update()
canvas.get_tk_widget().pack()
# Adds in the navigation toolbar addon from matplot lib so the user can manipulate the graph on display.

if all_sensors:
    select_menu.set(all_sensors[0])
    plot_single_sensor(all_sensors[0])
# This is the function that if all sensors are available the defaukt sensor and plots it data
# This can be changed so we can have a home screen but thats If I can be bothered, this just displays an irreleant graph with no user seleceted data.

root.mainloop()
# Starts the loop of the GUI in order to the GUI to constantly feedback to the code to extracrt data dependent on the users interaction with the GUI.
